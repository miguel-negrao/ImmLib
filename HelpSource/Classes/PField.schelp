TITLE:: PField
summary:: A parameter field definition
categories:: ImmLib
related:: Classes/ImmDef, Classes/FPSignal

DESCRIPTION::
Encapsulates a function RxRxRxR^n -> [0,1] where R are the real numbers representing a parameter field.

This function will take the form

code::
f = { |u, v, t, c1, c2| ... }
::

where u and v are two spatial coordinates, t is time and c1, c2, ... are parameters of the paramter field.

PFields, like functions, can be evaluated using the value method or the syntax sugar code:: pfield.(t, param1, ...)::. PFields are evaluated inside an event network (see FPLib's FRP library). When evaluated a PField returns a FPSignal[ Array[Float (size = n)] ] where n is the number of points in the PSurface being used to evaluate the PField. They should be passed in a FPSignal that carries the time events together with any other signals that control the PField's parameters.

PFields have available a distance function on the surface which calculates the length of a geodesic connecting two points. This function is different for each surface, so it needs to be fetched inside the function passed to ImmDef. Inside that function it is available at code::ImmDef.currentSurface.distFunc:: and the maximum distance on the surface is available at code::ImmDef.currentSurface.maxDist::. The code below shows a PField which calculates the distance to the point (0,0) and normalizes the result.

code::
(
PSurfaceDef(\surface1, PSphere(20) );
ImmDef(\test, { |t|
	var dist = ImmDef.currentSurface.distFunc;
	var maxDist = ImmDef.currentSurface.maxDist;

	var pf = PField({ |u,v,t| dist.(0,0,u,v)/maxDist });
	var sig = pf.plot( t );

	( amp: USpecArg( sig ) )
}, 0.1);
~chain = ImmUChain(\surface1, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)
::

For more in depth information on PFields see the link::Reference/ImmLib::.

note:: The range of u and v will depend on the surface. This can be checked using link::Classes/PSurface#rangeU:: and link::Classes/PSurface#rangeV::. For a spherical surface the ranges are [0,2pi]x[-pi/2, pi/2] ::

note::For the plotting to work correctly the PField should output on the [0, 1] range.::

note::
It's important to distinguish the arguments to the creation methods of predefined PFields with the actual arguments of the function that PField encapsulates. Creation arguments are static, once set can't be changed, evaluation arguments can be modulated.
code::
x = PField.spotlightFixed(0, 0) //creation arguments
x.value(t, 0.5) //evaluation arguments
::
::

CLASSMETHODS::

PRIVATE::prBump, barFuncU, barFuncV, expandContract2Func, expandContractFunc, generateHillsBipolarFunc, gradientFunc, prGeodesicDist, prGeodesicDist2, randomPatchGeneral, spotlightFixedFunc, spotlightFunc, generateHillsFunc, continousRandomSpotlight3, gradientFFunc, selfSwitchPeriodically, waveUSin, waveVSin,  animate, gradient1DFunc, generateHillsFuncDeterministic, sphericalHarmonicNormalizedFunc, spotlightFuncInverse, randomHillsBipolar.

METHOD:: new
Creates a PField

ARGUMENT:: f
A function of type

code::
f = { |u, v, t, c1, c2| ... }
::

returns:: PField

discussion::

A PField can be any mathematical function that can be described by SuperCollider's language operators. It should return a number.

code::
//Startup ImmLib first.


PSurfaceDef(\surface1, PSphere(20) );


(
ImmDef(\test, { |t|

	var pf = PField({ |u, v, t|

		sin( 2pi * ( (0.3 * u) + (t*0.2)) ).linlin(-1.0,1.0,0.0,1.0)

	});

	var sig = pf.plot( t );

	( amp: USpecArg( sig ) )
}, 0.1);
~chain = ImmUChain(\surface1, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

//hit cmd-. to stop

(
ImmDef(\test, { |t|

	var pf = PField({ |u, v, t|

		sin( 2pi * ( (0.2 * u) + t) ) * sin( 2pi * ( (0.3 * v) + t ) + pi )

	});

	var sig = pf.plot( t );

	( amp: USpecArg( sig ) )
}, 0.1);
~chain = ImmUChain(\surface1, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

//hit cmd-. to stop
::


subsection:: Predefined PFields

There are number of predefined PFields, that can be accessed through class methods. It's important to distinguish between two types of predefined PFields: pure pfields and pre-evaluated pfields. class methods for pure pfields (gradient, spotlight, spotlightFixed, barU, barV, sphericalHarmonic, etc) return an instance of class PField, which can be evaluated using the code::value:: method. Also, they can be rotated using the code::rotate2D:: and code::rotate3D:: methods and they can be plotted using code::PSmoothPlot::. Class methods for pre-evaluated pfields (wave2DSin, randomHills, etc) return an FPSignal, so there is no need for further evaluation. It's also not possible to rotate them, or use PSmoothPlot on them. Pre-evaluated pfields are pfields which are not defined purelly by mathematical functions, they also use elements of functional reactive programming to make more complex behaviours, such as changing the mathematical function being used every n seconds or changing the rate of passage of time internally in order to make it possible to smoothly change the frequency of a periodic function.

subsection:: Pure PFields

METHOD:: gradient

note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## u2
     || Start point (rangeU).
     ## v2
     || Start point (rangeV).
     ## a
     || [0,1].
     ## b
     || [0,1].
     ## curve
     || ]-inf,inf[.
::
::

A PField which evaluates to a at point p=(u2,v2) to b at points at the maximum distance from (u2,v2) and at the remaining points goes from a to b with a crossfade shape determined by 'curve'. At a point p2 it evaluates to:
code::

Env([0,1],[1],curve).at( dist(p,p2).linlin(0,maxDist,0,1) ).

::

returns:: PField

discussion::

code::
//Startup ImmLib first.
(
PSurfaceDef(\sphere, PSphere(20) );
PSurfaceDef(\plane, PPlane(RealVector3D[1.0,-1.0,-1.0], RealVector3D[0.0,2.0,0.0], RealVector3D[0.0,0.0,2.0], 8, 8 ) );
)

(
ImmDef(\test, { |t|

	var pf = PField.gradient;
	//                 t  u2   v2   a    b
	var sig = pf.plot( t, 0.0, 0.0, 0.0, 1.0 );

	( amp: USpecArg( sig ) )
}, 0.1);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart
)

(
ImmDef(\test, { |t|

	var pf = PField.gradient;
	                //  t  u2   v2   a                              b
	var sig =  pf.plot( t, 0.0, 0.0, { |x| (sin(x*2)+1)/2 } <%> t, { |x| (sin(x*3)+1)/2 } <%> t );

	( amp: USpecArg( sig ) )
}, 0.1);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart
)

//press 'f' on the plot window for a top view
(
ImmDef(\gradientForPlane, { |t|
	var pf = PField.gradient;
	           //t  u2   v2   a                             b
	var sig = pf.( t, 0.0, 0.0, { |x| (sin(x*2)+1)/2 } <%> t, { |x| (sin(x*3)+1)/2 } <%> t );
	PGridPlot( sig );
	( amp: USpecArg( sig ) )
}, 0.1, []);
~chain = ImmUChain(\plane, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\gradientForPlane)] );
~score = ImmUScore(\plane, ~chain);
~score.prepareAndStart;
~chain.gui
)


//With sliders

//sphere
(
ImmDef(\gradientForSphere, { |t, u, v, a, b, curve|
	var sig = PField.gradient.plot(t, u, v, a, b, curve);
	( amp: USpecArg( sig ) )

}, 0.1, [
	\u, ControlSpec(0.0, 2pi, \lin, 0, 0.0 ),
	\v, ControlSpec(-pi/2, pi/2, \lin, 0, 0.0 ),
	\a, ControlSpec(0.0, 1.0, \lin, 0, 0.0 ),
	\b, ControlSpec(0.0, 1.0, \lin, 0, 1.0 ),
	\curve, ControlSpec(-6.0, 6.0, \lin, 0, 0.0 )
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\gradientForSphere)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)

//plane
//press 'f' on the plot window for a top view
(
ImmDef(\gradientForPlane, { |t, u, v, a, b, curve|
	var pf1 = PField.gradient.(t, u, v, a, b, curve);
	PGridPlot( pf1 );
	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\u, ControlSpec(0.0, 1.0, \lin, 0, 0.5 ),
	\v, ControlSpec(0.0, 1.0, \lin, 0, 0.5 ),
	\a, ControlSpec(0.0, 1.0, \lin, 0, 0.0 ),
	\b, ControlSpec(0.0, 1.0, \lin, 0, 1.0 ),
	\curve, ControlSpec(-6.0, 6.0, \lin, 0, 0.0 )
]);
~chain = ImmUChain(\plane, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\gradientForPlane)] );
~score = ImmUScore(\plane, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: gradientF

note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## u2
     || Start point (rangeU).
     ## v2
     || Start point (rangeV).
     ## a
     || [0,1].
     ## b
     || [0,1].
::
::

A PField which evaluates to a at point p=(u2,v2) to b at points at the maximum distance from (u2,v2) and at the remaining points goes from a to b with a crossfade shape determined by function f. At a point p2 it evaluates to:
code::

f.( dist(p,p2).linlin(0,maxDist,0,1) ).

::

ARGUMENT:: f
A function f:[0,1] -> [0,1] used to interpolate from a to b. The final value is f(dist(p0,p1)).linlin(0,1,a,b)

returns:: PField

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\test, { |t, u2, v2, a, b|

	//make our own non linear shape to go from a to b
	var x = Env([ 0.0, 1.0, 0.5, 1.0, 0.0 ], [ 0.25, 0.25, 0.25, 0.25 ], [ -2.2, 2.1, 1.8, -2 ]).asMultichannelArray[0];

	var f = { |c| x.envAt(c) };

	var sig = PField.gradientF(f).plot( t, u2, v2, a, b );

	( amp: USpecArg( sig ) )

}, 0.1,[
	\u, ControlSpec(0.0, 2pi, \lin, 0, 0.0 ),
	\v, ControlSpec(-pi/2, pi/2, \lin, 0, 0.0 ),
	\a, ControlSpec(0.0, 1.0, \lin, 0, 0.0 ),
	\b, ControlSpec(0.0, 1.0, \lin, 0, 1.0 )
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.1], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: spotlight
note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## u2
     || Start point (rangeU).
     ## v2
     || Start point (rangeV).
     ## a
     || [0,1].
     ## d
     || wideness of the transition from 0 to 1 - [0,5].
::
::

A PField that grows symetrically from a start point until occupying all the surface.

It returns 1 if the distance of (u1,v1) to (u2,v2) is smaller then c and 0 otherwise.

returns:: PField

discussion::


code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\test, { |t, u2, v2, a, b|

	var pf = PField.spotlight;

	                 //t, u,     v,    c,              d
	var sig = pf.plot( t, 0.0,   0.0,  t.lfsine(0.5),  0.0 );

	( amp: USpecArg( sig ) )

}, 0.1,[]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

code::
//modulated with lfsine
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\test, { |t, u2, v2, a, b|

	var pf = PField.spotlight;

	                 //t, u,     v,    c,              d
	var sig = pf.plot( t, 0.0,   0.0,  t.lfsine(0.5),  0.0 );

	( amp: USpecArg( sig ) )

}, 0.1,[]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
)

//sliders
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\test, { |t, u0, v0, c, d|

	var pf1 = PField.spotlight.plot( t, u0, v0, c, d );

	( amp: USpecArg( pf1 ) )

}, 0.1,[
	\u0, \azimuth,
	\v0, \elevation,
	\c, [0,1.0],
	\d, [0,1.0]
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::


On a plane:
code::
(
PSurfaceDef(\plane, PPlane(RealVector3D[-1.0,-1.0,1.0], RealVector3D[2.0,0.0,0.0], RealVector3D[0.0,2.0,0.0] ));
ImmDef(\test, { |t, u0, v0, c, d|

	var sig = PField.spotlight.( t, u0, v0, c, d );

	PGridPlot( sig, "Spotlight on Plane");

	( amp: USpecArg( sig ) )

}, 0.1,[
	\u0, [0,1],
	\v0, [0,1],
	\c, [0,1.0],
	\d, [0,1.0]
]);
~chain = ImmUChain(\plane, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\test)] );
~score = ImmUScore(\plane, ~chain);
~score.prepareAndStart;
~chain.gui
)
::


METHOD:: spotlightFixed
note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## u2
     || Start point (rangeU).
     ## v2
     || Start point (rangeV).
     ## a
     || [0,1].
     ## d
     || wideness of the transition from 0 to 1 - [0,5].
::
::

The same as 'spotlight' but the position of the point to which distance is being measured is fixed and not modulatable.

ARGUMENT:: u
SimpleNumber - in range surface.manifold.rangeU

ARGUMENT:: v
SimpleNumber - in range surface.manifold.rangeV

returns:: PField

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\test, { |t|

	var pf = PField.spotlightFixed( pi/4, pi/2);
	                 //time,  c
	var sig = pf.plot( t,     { |x| (sin(x*5)+1)/2 }.lift.(t), 0.3 );

	( amp: USpecArg( sig ) )

}, 0.1,[]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\test)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::



METHOD:: expandContract
note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## u2
     || Start point (rangeU).
     ## v2
     || Start point (rangeV).
     ## c
     || Grow factor - [0,1].
     ## curve
     || ]-inf, inf[.
::
::

A PField that "grows" symetrically from a start point (u2,v2) until occupying the entire surface and then shrinks into the antipodal point.


note::Only valid for spherical surfaces.::


returns:: PField

discussion::
code::

(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\expandContractForSphere2, { |t, u0, v0, c, curve|

	var pf1 = PField.expandContract.plot( t,  u0, v0, c, curve );

	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\u0, [0, 2pi],
	\v0, ControlSpec(pi/2.neg,pi/2, default:0),
	\c, nil,
	\curve, ControlSpec(-6,6,default:0)
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\expandContractForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)

::

METHOD:: barU

note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## wideness
     || [0,1]
::
::

A PField that grows parallel to the u axis.

returns:: PField

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\barU2, { |t, wideness|
	var pf1 = PField.barU.plot(t, wideness);
	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\wideness, ControlSpec(0.0, 1.0, \lin, 0, 0.5 )
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\barU2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: barV

note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## wideness
     || [0,1]
::
::

A PField that grows parallel to the v axis.

returns:: PField

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\barV2, { |t, wideness|
	var pf1 = PField.barV.plot( t, wideness);
	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\wideness, ControlSpec(0.0, 1.0, \lin, 0, 0.5 )
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\barV2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: sphericalHarmonic
note::
PField arguments:
definitionlist::
     ## t
     || time.
     ## f
     || frequency of the monocromatic source [0, 10]
::
::

A PField which uses the spherical harmonic functions for given m,n coeficients. The spherical harmonic function is multiplied with a monocromatic source at frequency f.

ARGUMENT:: m
Integer - range: -l <= m <= l

ARGUMENT:: l
Integer - range 0,1,...

returns:: PField

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).plot(t,f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 )
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\sphericalHarmonicForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::


subsection:: reactive pfields and pre-evaluated pfields

Pre-evaluted pfields return an FPSignal instead of a PField.

Reactive fields are not pure mathematical functions, they use switching (FRP) to change the mathematical function being used when some event occurs. This allows the generation of new mathematical functions at runtime while the PField is running. Another reason for a PField to be pre-evaluated is to be able to "slowdown" time in order to be able to smoothly change the frequency of a periodic pfield.

METHOD:: wave2D

A PField which implements a wave travelling throught the surface caused by a point source at (u0,v0) with signal given by function g  where the speed of propagation is proportional to l. The speed of propagations controls the spatial wavelenght, i.e. how far apart in space two peaks of the signal are.

note::
In order for freq to be the frequency in Hertz the function should have period of 1.
l controls the spatial frequency/wavelenght.
This method returns an FPSignal and not a PField.
::

ARGUMENT:: t
FPSignal

ARGUMENT:: u0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeU

ARGUMENT:: v0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeV

ARGUMENT:: l
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: freq
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: g
Function

ARGUMENT:: plot
Boolean - If true plot pfield with PSmoothPlot

returns:: FPSignal[ [Float] ]

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\wave2D2, { |t, u0, v0, l, freq|

	//make our own non linear shape to go from a to b
	var x = Env([ 0.0, 1.0, 0.5, 1.0, 0.0 ], [ 0.25, 0.25, 0.25, 0.25 ], [ -2.2, 2.1, 1.8, -2 ]).asMultichannelArray[0];

	var g = { |t| x.envAt(t.mod(1.0)) };

	var pf1 = PField.wave2D(t, u0, v0, l, freq, g, true);

	( amp: USpecArg( pf1 ) )

}, 0.1, [\u0, [0,2pi], \v0, [-pi,pi], \l, [0.0, 2.0], \freq, [1/10,2] ]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\wave2D2, [\l,1])] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: wave2DSin

A PField which implements a wave travelling throught the surface caused by a point source at (u0,v0) with signal given by sinusoidal function  where the speed of propagation is proportional to l.

note::
l controls the spatial frequency/wavelenght.
This method returns an FPSignal and not a PField.
::

ARGUMENT:: t
FPSignal

ARGUMENT:: u0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeU

ARGUMENT:: v0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeV

ARGUMENT:: l
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: freq
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: plot
Boolean - plot pfield with PSmoothPlot

returns:: FPSignal[ [Float] ]

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\wave2DSinForSphere2, { |t, u0, v0, l, freq|

	var pf1 = PField.wave2DSin(t, u0, v0, l, freq, true);

	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\u0, ControlSpec(0,2pi),
	\v0, [-pi,pi],
	\l, ControlSpec(0.0, 2.0,default:1),
	\freq, ControlSpec(1/10,2,default:0.5)
] );
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\wave2DSinForSphere2, [\l,1])] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: wave2DSaw

A PField which implements a wave travelling throught the surface caused by a point source at (u0,v0) with signal given by a saw like function where the speed of propagation is proportional to l.

note::
l controls the spatial frequency/wavelenght.
This method returns an FPSignal and not a PField.
::

ARGUMENT:: t
FPSignal[ Float ]

ARGUMENT:: u0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeU

ARGUMENT:: v0
SimpleNumber or FPSignal[ SimpleNumber ]
In range surface.manifold.rangeV

ARGUMENT:: l
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: freq
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: plot
Boolean - If true plot pfield with PSmoothPlot

returns:: FPSignal[ [Float] ]

discussion::



code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\wave2DSawForSphere2, { |t, u0, v0, l, freq|

	var pf1 = PField.wave2DSaw(t, u0, v0, l, freq, true);

	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\u0, ControlSpec(0,2pi),
	\v0, [-pi,pi],
	\l, ControlSpec(0.0, 2.0,default:1),
	\freq, ControlSpec(1/10,2,default:0.5)
] );
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\wave2DSawForSphere2, [\l,1])] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: continousRandomSpotlight

A PField that grows symetrically from a start point until occupying all the surface and then shrinks back to the same point, it then randomly chooses another point to grow to and repeats the process indefinitely. It takes numSecs to grow and shrink back to the chosen point.

ARGUMENT:: t
FPSignal[ Float ]

ARGUMENT:: numSecs
SimpleNumber or FPSignal[ SimpleNumber ]


ARGUMENT:: curve
SimpleNumber or FPSignal[ SimpleNumber ]


returns::  FPSignal[ [Float] ]

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\continousRandomSpotlights2, { |t, numSecs, curve|

	var pf1 = PField.continousRandomSpotlight(t, numSecs, curve);
	PGridPlot( pf1 );
	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\numSecs, ControlSpec(0.5,10,default:2),
	\curve, ControlSpec(-6,6,default:0)
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\continousRandomSpotlights2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: continousRandomSpotlight2
A PField that grows symetrically from a start point until occupying all the surface and then shrinks back to the same point, it then randomly chooses another point to grow to and a time interval for that growth between numSecsLo and numSecsHi and repeats the process. It takes numSecs to grow and shrink back to the chosen point.

numSecs is calculated randomly between numSecsLo and numSecsHi

ARGUMENT:: t
FPSignal

ARGUMENT:: numSecsLo
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: numSecsHi
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: curve
SimpleNumber or FPSignal[ SimpleNumber ]

returns:: FPSignal[ [Float] ]

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\continousRandomSpotlight22, { |t, numSecsLo, numSecsHi, curve|

	var pf1 = PField.continousRandomSpotlight2(t, numSecsLo, numSecsHi, curve);

	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\numSecsLo, ControlSpec(0.5,10,default:1),
	\numSecsHi, ControlSpec(0.5,10,default:2),
	\curve, ControlSpec(-6,6,default:0)
]);

~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\continousRandomSpotlight22)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: randomHills
Every num seconds switches into a new function. Each function is composed of the sum of code::numHills:: spotlight functions with centers on random points (the hills) each hill having a random wideness given  in [sizeA, sizeB] and height in [heightA, heightB]. The animation progressivelly crossfades from one set of hills to another every code::numSeconds:: seconds.

ARGUMENT:: t
FPSignal[ Float ]

ARGUMENT:: numSecs
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: numHills
Integer or FPSignal[ Integer ]

ARGUMENT:: sizeA
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: sizeB
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: bumpSize
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: heightA
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: heightB
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

returns::  FPSignal[ [Float] ]

discussion::

When using an FPSignal for numSecs, the number of seconds is only sampled when switching occurs to the new set of hills. So if the previous numSecs value was 8seconds, even if the numSecs signal changes in the mean time, only after 8 seconds will the new value of numSecs signal be sampled.

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\randomHills_2, { |t, numSecs, numHills, sizeA, sizeB, bumpSize, heightA, heightB|
	var pf1 = PField.randomHills(t, numSecs, numHills, sizeA, sizeB, bumpSize, heightA, heightB);
	PGridPlot( pf1 );
	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\numSecs, ControlSpec( 0.5,10, default: 2),
	\numHills, ControlSpec(1,6,step:1, default:3),
	\sizeA, ControlSpec(default:0.3),
	\sizeB, ControlSpec(default:0.35),
	\bumpSize, ControlSpec( 0.0, 0.5, default: 0.5),
	\heightA, ControlSpec(default:1),
	\heightB, ControlSpec(default:1)
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\randomHills_2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: randomHills2
Every num seconds switches into a new function, where num is ramdomly choosen between numSecsLo and numSecsHi. Each function is composed of the sum of code::numHills:: spotlight functions with centers on random points (the hills) each hill having a random wideness in [sizeA, sizeB] and height in [heightA, heightB]. The animation progressivelly crossfades from one set of hills to another every code::numSeconds:: seconds.

ARGUMENT:: t
FPSignal[ Float ]

ARGUMENT:: numSecsLo
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: numSecsHi
SimpleNumber or FPSignal[ SimpleNumber ]

ARGUMENT:: numHills
Integer or FPSignal[ Integer ]

ARGUMENT:: sizeA
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: sizeB
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: bumpSize
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: heightA
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

ARGUMENT:: heightB
SimpleNumber or FPSignal[ SimpleNumber ] - range [0,1]

returns::  FPSignal[ [Float] ]

discussion::

When using an FPSignal for numSecs, the number of seconds is only sampled when switching occurs to the new set of hills. So if the previous numSecs value was 8seconds, even if the numSecs signal changes in the mean time, only after 8 seconds will the new value of numSecs signal be sampled.

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\randomHills2_2, { |t, numSecsLo, numSecsHi, numHills, sizeA, sizeB, bumpSize, heightA, heightB|

	var pf1 = PField.randomHills2(t, numSecsLo, numSecsHi, numHills, sizeA, sizeB, bumpSize, heightA, heightB);
	PGridPlot( pf1 * 2 );
	( amp: USpecArg( pf1 ) )

}, 0.1,
[
	\numSecsLo, ControlSpec( 0.5,10, default: 1),
	\numSecsHi, ControlSpec( 0.5,10, default: 2),
	\numHills, ControlSpec(1,6,step:1, default:3),
	\sizeA, ControlSpec(default:0.4),
	\sizeB, ControlSpec(default:0.5),
	\bumpSize, ControlSpec( 0.0, 0.5, default: 0.5),
	\heightA, ControlSpec(default:1),
	\heightB, ControlSpec(default:1)
]
);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\randomHills2_2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

METHOD:: moveHills

code::numHills:: spotlight functions are created with random center locations and wideness given by code::size::. On each iteration of the timer (the time between iteration is given by the delta parameter of ImmDef) the center of each hill is moved in a random direction by a distance given by code::step::. The parameters are not yet modulateable.


ARGUMENT:: t
FPSignal

ARGUMENT:: numSecs
SimpleNumber

ARGUMENT:: numHills
SimpleNumber

ARGUMENT:: size
SimpleNumber

ARGUMENT:: step
SimpleNumber

ARGUMENT:: startInSamePlace
Boolean
If true all spotlights start at the same location.

ARGUMENT:: mode
one of \bounce, \wrap, \noconstrain

returns::  FPSignal[ [Float] ]

discussion::

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\moveHills_2, { |t, numSecs, numHills, size, step|
	var pf1 = PField.moveHills(t,  numSecs, numHills, size, step, true, \bounce);
	PGridPlot( pf1 );
	( amp: USpecArg( pf1 ) )
}, 0.1, [
	\numSecs, ControlSpec( 0.5,10, default: 1),
	\numHills, ControlSpec(1,5,step:1,default:2),
	\size, ControlSpec(default:0.4),
	\step, ControlSpec( 0.0, 2.0, default: 1)
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\moveHills_2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::

INSTANCEMETHODS::

PRIVATE:: composeNAryOp, reverseComposeBinaryOp, <>, valueArray, composeBinaryOp, composeUnaryOp, plotImage, valueArrayS, valuePlot, valueS, animate


METHOD:: func
The mathematical function of the PField
returns:: Function

METHOD:: value
Evaluate the PField

ARGUMENT::  ... args
Of kind FPSignal[ SimpleNumber ] or SimpleNumber

returns::  FPSignal[ [Float] ]

METHOD:: plot
Wraps the pfField in a PSmoothPlot

ARGUMENT::  ... args
Of kind FPSignal[ SimpleNumber ] or SimpleNumber

returns::  FPSignal[ [Float] ]

METHOD:: rotate2D
Create a new PField which allows for rotation around 1 axis.
Adds arguments after 't': angle=0.

note::Only valid for plane surfaces.::

METHOD:: rotTransScale2D
Create a new PField which allows for rotation around 1 axis, scaling and translation. Adds arguments after 't': angle=0, scale=1, ut=0, vt=0.

note::Only valid for plane surfaces.::

METHOD:: rotate3D

Take the original PField and create a new one which allows for rotation around 3 axis.

The new PField has 3 extra arguments prepended to the argument list for the 3 angles of rotation (rotate, tilt, tumble).

note::Only valid for spherical surfaces.::

discussion::
code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f, rotate, tilt, tumble|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).rotate3D.plot(t,rotate, tilt, tumble, f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 ),
	\rotate, [0, 2pi],
	\tilt, [0, 2pi],
	\tumble, [0, 2pi]
]);
~chain = ImmUChain(\sphere, [\immWhiteNoise, [\globalAmp, 0.0], ImmMod(\sphericalHarmonicForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~score.prepareAndStart;
~chain.gui
)
::



