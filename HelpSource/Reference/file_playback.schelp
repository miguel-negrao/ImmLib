title:: File playback with ImmLib
summary:: bufPlayer, diskPlayer, decorrelate units
categories::ImmLib

	There are two means of playing soundfiles. A soundfile can be loaded to memory and played with the 'bufPlayer' Udef or it can be played directly from disk with a 'diskPlayer' Udef. The two methods must be dealt with differently in ImmLib.

	In either case if the file is played directly at each point of the surface the sound output of any two points will be completelly correlated, and the precedence effect will destroy the immersiveness. In order to defeat the precedence effect one should decorrelate each stream. This can be done in multiple ways.

  The start times of the sound file can be set to a different value for each stream. Depending on how far apart the start times are this can destroy completelly the perception of the sound events in the sound file, but it will create decorrelated streams. This can work well for textural sounds where the perception of sound events recorded on the sound file is not important. It's also possible to set the pitch to a different value for each stream.

  It's also possible to use the 'decorrelate' Udef which does decorrelation in the frequency domain using FFTs by adding a different constant random phase offset to each fft bin. This will preserve the internal sound events of the sound file but will color the sound and add artifacts.

  Finally it's possible to use ad-hoc sound processing through aditional units such that the processing introduces enough phase differences that the sound streams become decorrelated.

section:: Sound file playback from memory - bufPlayer.

Using bufPlayer will load the sound file to memory. When using multiple servers ImmLib will take care of loading the buffer into all the servers that will play this event. Selecting the soundfile can be done from the GUI.
Setting the start time or pitch to a different value for each each stream can also be done directly in the GUI by clicking the 'n' button next to the 'bufrate' and 'fileStartPos' arguments, then 'do'->'edit' and editing the values with the mouse. This can be also be done in code by using ParArgs on those arguments.

code::
//start times far apart
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f, rotate, tilt, tumble|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).rotate3D.plot(t,rotate, tilt, tumble, f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 ),
	\rotate, [0, 2pi],
	\tilt, [0, 2pi],
	\tumble, [0, 2pi]
]);
~file = BufSndFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav",loop:true);
~chain = ImmUChain(\sphere,
	[ 'bufPlayer',
		[\soundFile, ~file, \globalAmp, 0.0, 'fileStartPos', ParArg( 20.collect{ 4.0.rand }),'bufrate', ParArg( 20.collect{ rrand(0.5,2.0) })],
		ImmMod(\sphericalHarmonicForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~chain.gui;
~score.gui;
)

//start times closer together ~ 0.2s

(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f, rotate, tilt, tumble|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).rotate3D.plot(t,rotate, tilt, tumble, f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 ),
	\rotate, [0, 2pi],
	\tilt, [0, 2pi],
	\tumble, [0, 2pi]
]);
~file = BufSndFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav",loop:true);
~chain = ImmUChain(\sphere,
	[ 'bufPlayer',
		[\soundFile, ~file, \globalAmp, 0.0, 'fileStartPos', ParArg( 20.collect{ 0.2.rand }),'bufrate', ParArg( 20.collect{ rrand(0.9,1.1) })],
		ImmMod(\sphericalHarmonicForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~chain.gui;
~score.gui;
)
::

section:: Sound file playback directly from disk - diskPlayer.

diskPlayer will read a sound file from the disk. Internally it uses DiskIn, which uses a buffer and then streams portions of the sound file onto this buffer. This means that each of the different synths of the ImmU must have their own buffer. This can be done by suplying a ParArg with different instances of DiskSndFile to the 'soundFile' argument of the unit.


code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f, rotate, tilt, tumble|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).rotate3D.plot(t,rotate, tilt, tumble, f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 ),
	\rotate, [0, 2pi],
	\tilt, [0, 2pi],
	\tumble, [0, 2pi]
]);
~file = ParArg( 20.collect{ DiskSndFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav", 4.rand * 44100,rate:rrand(0.5,2.0), loop:true) });
~chain = ImmUChain(\sphere,
	[ 'diskPlayer',
		[\soundFile, ~file, \globalAmp, 0.0],
		ImmMod(\sphericalHarmonicForSphere2)] );
~score = ImmUScore(\sphere, ~chain);
~chain.gui;
~score.gui;
)
::



section:: 'decorrelate' unit

The 'decorrelate' unit should be inserted after the 'diskPlayer' or 'bufPlayer' units.

code::
(
PSurfaceDef(\sphere, PSphere(20) );
ImmDef(\sphericalHarmonicForSphere2, { |t, f, rotate, tilt, tumble|
	//try different values of m and l.
	var m = 1;
	var l = 2;
	var sig = PField.sphericalHarmonic(m,l).rotate3D.plot(t,rotate, tilt, tumble, f);
	( amp: USpecArg( sig ) )
}, 0.1, [
	\freq, ControlSpec(1/10, 4, \lin, 0, 0.5 ),
	\rotate, [0, 2pi],
	\tilt, [0, 2pi],
	\tumble, [0, 2pi]
]);
~file = BufSndFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav",loop:true);
~chain = ImmUChain(\sphere,
	[ 'bufPlayer',
		[\soundFile, ~file, \globalAmp, 0.0],
		ImmMod(\sphericalHarmonicForSphere2)],
	\decorrelate
);
~score = ImmUScore(\sphere, ~chain);
~chain.gui;
~score.gui;
)
::







