title:: ImmLib tutorial
summary:: A tutorial for the ImmLib library
categories::ImmLib

section:: Introduction

For a overview of the conceptual framework and implementation details of ImmLib see the ICMC paper: http://www.friendlyvirus.org/files/miguelnegraoicmc2014.pdf.

ImmLib uses 2 different SuperCollider frameworks:

list::
##link::Reference/Unit-Lib:: - A library for general synth and resource creation and manipulation.
##link::Overviews/FP:: - A library which provides an implementation of language side event networks through link::Overviews/FRP::. FRP is used to animate and interact with the PFields as well as provide MIDI, OSC and GUI control of unit parameters.
::

To use ImmLib you must become familiar with Unit Lib and with the FRP library in FP Lib.

Unit Lib makes it easier to manage buffers, connect multiple synths and provides a complete DAW GUI system similar to Apple's Logic or Ableton's Live. ImmLib is built on top of Unit Lib, so all of it's functionality, including the DAW GUI is available. To become familiar with Unit Lib it is recommended to read the tutorial: link::Reference/Unit-Lib::. There is also a manual available inside the dmgs of the latest version of WFSCollider (https://github.com/GameOfLife/WFSCollider-Class-Library/releases).

To get familiar with FRP read link::Overviews/FRP:: and for event networks see link::Classes/EventNetwork::. The key points to keep in minds are

list::
##FPSignals and EventStreams represent events that can happen at any time.
##Signals are continuous (they have a "now" value) while event streams are discrete (no "now" value). You can think of a signal as a function of time f: Time -> A, and an event as a list of time stamped values { (t1,v1), (t2,v2), ... }.
##An event network connects inputs (MIDI, GUI, OSC, timer, etc) to outputs (set argument to a synth, draw on screen, etc) via signals and event streams.
##signals and event streams when placed in an event network are automatically connected to inputs and outputs when the network is compiled or started and are automatically disconnected when the network is stopped. There is no need for explicit registration and de-registration of callbacks.
::

note::
Pseudo-type signatures are used in the help files for the arguments and return types of methods. ClassA[ ClassB, ClassC ] represents an objects of ClassA which contains or depends on objects of ClassB and Class C. So FPSignal[ Float ] represents an object of class FPSignal which carries floats. Array[A] is an array carrying values of type A (for homogenous arrays).
::

section:: Installation and startup code

To correctly install ImmLib and its dependencies, follow the instructions in the README.md file.

You need to generate the UnitLib synthdefs once:

code::
ULib.writeDefaultSynthDefs
::

If you intend to use VBAP panners in a system with n speakers you need to execute once:

code::
(
VBAPSynthDef.writeDefs(n);
VBAPSynthDef.writePreviewDefs
)
::

For startup code see link::Classes/ImmLib::.

section:: Surfaces

ImmLib works with virtual surfaces which can be addressed by a speaker system. The speaker system should be able to pan a source to any location on the surface. The system will not work if one tries to use a surface on which the speaker system cannot pan sources, for instance using a sphere when the speaker system is horizontal will not work.

Surfaces are represented by the link::Classes/PSurface:: class which holds both an abstract mathematical description of the surface (how to map onto the surface from an [a,b]x[c,d] domain, i.e. a parametrization for the surface), how to calculate distance in the surface, i.e. a geodesic distance function, and if it is a closed or open surface) and a set of points on the surface to be used for panning positions. Henceforth when we mention "points of the surface" we are referring to the set of points chosen to represent the surface which are stored in the PSurface.

code::
PGeodesicSphere(1).plot

PSphere(10).plot

PPlane(RealVector3D[-1.0,-1.0,1.0], RealVector3D[2.0,0.0,0.0], RealVector3D[0.0,2.0,0.0] ,10,10).plot
::

Any surfaces that you will be using for a score must be assigned a name with a PSurfaceDef:
code::
PSurfaceDef(\test, PSphere(20) )
::

section:: Quick start

Make sure the system is properly started. For a sphere with 30 points you probably will need to start multiple servers.

ImmLib makes available a set of predefined ImmDefs containing one PField which you can use out of the box, for modulating the 'amp' control.

The currently available ImmDefs are : gradient, spotlightInverse, randomHills, randomHills2, spotlight, sphericalHarmonic, expandContractSphere, continousRandomSpotlight2Plot, wave2DSin, wave1DSaw, randomHills2Plot, moveHills, barU, gradient1DPlane, wave2DSaw, continuousRandomSpotlightPlot, barV, continuousRandomSpotlight, randomHillsPlot, wave1DSin, continousRandomSpotlight2.

You can try a different ImmDef either by changing the name in the ImmMod or by dragging from the def list window to the chain gui. For modulating any parameter using predefined ImmDefs see the last section of this tutorial.

You can double-click on the event on the score to open the chain gui. There you can use the 'plot' slider to turn on and off the visualization.

code::
(
PSurfaceDef(\surface1, PSphere(30) );
~mod = ImmMod(\wave2DSin, [\u0, 0.25, \v0, 0.5, \l, 0.4]);
~chain = ImmUChain(\surface1, [\immWhiteNoise, [\globalAmp, 0.03], ~mod ] );
~score = ImmUScore(\surface1, ~chain);
~score.gui
)
::

code::
(
Udef(\dust,{
	var a = Dust.ar(\density.ukr(10,10, 100,\exp));
	var b = a * \amp.kr(0.0) * \globalAmp.ukr(0.1, \amp);
	UOut.ar(0, b)
})
)

(
PSurfaceDef(\surface1, PSphere(30) );
~mod = ImmMod(\randomHillsPlot, [\sizeA, 0.525, \sizeB, 0.7]);
~chain = ImmUChain(\surface1, [\dust, [\density, 80, \globalAmp, 0.8], ~mod ] );
~score = ImmUScore(\surface1, ~chain);
~score.gui
)


::


section:: ImmUChain, ImmUScore

When using ImmLib one must use the link::Classes/ImmUChain:: and  link::Classes/ImmUScore:: classes. The ImmUChain class inherits from link::Classes/ParUChain::, for details regarding sending different argument values to each synth of an ImmUChain see the documentation of ParUChain and ParU.

A code example:

code::
(
//synth definition
Udef(\mynoise, {
	var in = WhiteNoise.ar * \amp.kr(1);
	UOut.ar(0, in * \globalAmp.kr(0.1) )
})
.setSpec(\amp, \amp)
.setSpec(\globalAmp, \amp);

//pfield definitions
ImmDef(\wave2DSin, { |t, u0, v0, l, freq|

	var pf1 = PField.wave2DSin(t, u0, v0, l, freq);

	( amp: USpecArg( pf1 ) )

}, 0.1, [
	\u0, ControlSpec(0,2pi),
	\v0, [-pi,pi],
	\l, ControlSpec(0.0, 2.0,default:1),
	\freq, ControlSpec(1/10,2,default:0.5)
] );

PSurfaceDef(\surface1, PSphere(10) );
)

(
~mod = ImmMod(\wave2DSin, [\u0, pi/2, \v0, 0, \l, 1, \freq, 0.5]);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain)
)

~score.gui
::

Notice that even though we are using the exact same \mynoise with the same argument values at each point of the surface, the actual sound stream for each point is decorreated. This is because each WhiteNoise UGen automatically picks a different random number generator on each synth.

section:: PFields

subsection:: Using and creating PFields.

	In ImmLib spatial patterns are created by associating the output of PFields with a parameter of a unit (e.g. teletype::\freq::).

A PField function can be any mathematical function (no side effects !!) that one can implement in SuperCollider.

code::

(
ImmDef(\pfield2,{ |t|
	//the function is passed in the time signal
	//which is updated once every delta seconds (see below in ImmDef)
	//with the elapsed time
	var d = t.collect{ |t| putStrLn("time is now % ".format(t)) }.enOut;

	//a simple PField
	var pf =  PField({ |u,v,t| (t % 5)/5 });

	//evaluating the PField with the time signal results in a
	//signal which will carries an array with as many values
	//as there are points in the surface.
	//The values of the array are generated by evaluating the pfield
	//function at each point of the array using the time value
    //in the time signal.
	var pfSignal = pf.(t);

	//this will plot the output of the pfield
	//the PField should output value in the [0,1] range in order for
	//plotting to work correctly
	PGridPlot( pfSignal );

	//this function must return a dictionary of keys (a symbol) to
	//UModArgs (UspecArg or UArg) containing a signal resulting from the
	//evaluation of a pfield or a combination of these.
	//Using USpecArg will map the values of the PField onto the spec range
	//of the control
    //Using Uarg will use the values of the signal directly.
	( amp: USpecArg( pfSignal ) )

});
)

(
~mod = ImmMod(\pfield2, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~score.gui


(
ImmDef(\pfield3,{ |t|

	//now using also u and v
	var pf =  PField({ |u,v,t| ((t + u + v) % 5)/5 });

	//plot using PSmoothPlot
	var pfSignal = pf.plot(t);

	( amp: USpecArg( pfSignal ) )

});
)

(
~mod = ImmMod(\pfield3, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~score.gui
::

ImmLib comes with a predefined set of ImmDefs which are loaded at startup. They are in the 'immdefs.scd' file at the base of the ImmLib folder.

subsection:: Combining PFields

PFields are essentially functions, in fact, the PField class has a teletype::func:: variable which contains the actual instance of link::Classes/Function::, therefore the PField functions can be composed as any other function. To simplify this process the link::Classes/PField:: class itself inherits from link::Classes/AbstractFunction:: and forwards all the composition messages to the the internal Function instance, so you can use a PField as if it was an instance of Function.

code::

(
ImmDef(\def4, { |t|
	var sig;
	var pf1 = PField({ |u,v,t| (t % 5)/5 });

	var pf2 = PField({ |u, v, t| sin( 2pi * ( (0.3 * u) + t) ) });

	var pf3 = (pf1 * pf2).postln;

	sig = pf3.plot( t );

	( amp: USpecArg( sig ) )

})
)

(
~mod = ImmMod(\def4, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~score.gui


(
ImmDef(\def5, { |t|
	var sig;
	var pf1 = PField({ |u,v,t| (t % 5)/5 });

	var pf2 = PField({ |u, v, t| (sin( 2pi * ( (0.3 * u) + t) )+1)/2 });

	var pf3 = (pf1 + pf2)/2;

	sig = pf3.plot( t );

	( amp: USpecArg( sig ) )

})
)

(
~mod = ImmMod(\def5, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~score.gui

(
ImmDef(\def6, { |t|
	var sig;

	var pf1 = PField({ |u, v, t| (sin( 2pi * ( (0.2 * u) + t) )+1)/2 });

	var pf2 = PField({ |u, v, t| (sin( 2pi * ( (0.1 * v) + (0.5*t)) )+1)/2 });

	var pf3 = pf1.mod(pf2);

	sig = pf3.plot( t );

	( amp: USpecArg( sig ) )

})
)

(
~mod = ImmMod(\def6, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~score.gui
::

Sometimes one needs to make a composition of functions for which there isn't already an operator. In that case one can write the function explicitelly:

code::
(
ImmDef(\def7, { |t, k|
	var sig;

	var pf1 = PField({ |u, v, t, k| (sin( 2pi * ( (0.2 * u) + (k*t)) )+1)/2 });

	var pf2 = PField({ |u, v, t, k| (sin( 2pi * ( (0.1 * v) + (k*t)) )+1)/2 });

	var pf3 = PField({ |u,v,t, k|
		pf1.func.(u, v, t, pf2.func.(u,v,t,k)+1 )
	});

	sig = pf3.plot( t, k );

	( amp: USpecArg( sig ) )

}, 0.1, [\k, [0,1]])
)

(
~mod = ImmMod(\def7, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart
)

~chain.gui
::


When a PField is evaluated it returns a signal which carries an array of values. Signals can also be composed using any of the signal combinators available (collect, select, inject, etc; see link::Classes/FPSignal#Combinators::).

warning::
The clocked evaluation of PFields (e.g. every 0.1 seconds) is performed in sclang which is a rather slow interpreter. Evaluating a couple of PFields on a 40 point surface can easilly take sclang to 100% cpu usage, it is therefore important to write efficient code. One should  avoid multiple unnecessary function calls.

For instance,

code::
(PField({ |u, v, t, k| (sin( 2pi * ( (0.2 * u) + (k*t)) )+1)/2 }) + 5 ) /6
::

is less eficient then

code::
PField({ |u, v, t, k| (sin( 2pi * ( (0.2 * u) + (k*t)) )+1)/2 + 5 / 6})
::
.

When dealing with signals one should also do the same and avoid unnecessary function calls:

code::
(signal1 + 3 ) / signal2
::
is less eficient then
code::
{ |a,b| (a+3)/b }.lift.(signal2, signal2)
::

On the first case there are two function call, on the second only one function call.


::


subsection:: Interacting with PFields

PFields evaluate to signals which can be interacted with in real-time using GUIs, MIDI or OSC. The first step is to create a signal (or event stream) from the GUI, MIDI or OSC object inside the event network. To get a event network input from any GUI use  link::Classes/Object#enIn::. For OSC use link::Classes/OSCfunc#*enIn::. For MIDI use the Modality Library, calling link::Classes/Object#enIn:: on the MKtlElement.

code::
(
~slider = Slider();

~window = Window().layout_(VLayout(~slider));

ImmDef(\def9, { |t|

    var pf =  PField({ |u,v,t, k| (t % k)/k });

	var sliderSignal = ~slider.enIn;

	var sig = pf.plot(t, sliderSignal.nlin(0.5, 3) );

    ( amp: USpecArg( sig ) )

})
)

(
~mod = ImmMod(\def9, []);
~chain = ImmUChain(\surface1, [\mynoise, [], ~mod] );
~score = ImmUScore(\surface1, ~chain);
~score.prepareAndStart;
~window.front
)

~score.gui
::

section:: Adding pfields from the GUI

If you don't want to create pfields, and just want to use the ones that come with ImmLib, it's possible then to use ImmLib just from the GUIs.

You can create a new score from the menu bar ("score"->"new ImmUScore"). By clicking the '+' button you can create a new event and you can add units to it by cliking the 'udefs' button in the event gui which will open the udefs, umaps and Immdefds definitions window, you can then drag units to the uchain GUI. To associate a pfield with a parameter of a unit from the GUI first drag the 'pfield' umap to the parameter you want to modulate. This currently causes an error, just close the uchain GUI and open it again. Then you can drag one of the pfields named UM... into the grey rectangle in the umap.

image::umap1.png::
image::umap2.png::
image::umap3.png::
image::umap4.png::



